version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: aido-postgres
    environment:
      POSTGRES_USER: aido
      POSTGRES_PASSWORD: aido
      POSTGRES_DB: aido_lab
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aido"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aido-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: aido-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aido-network

  # Backend API
  backend:
    image: aido-backend:latest
    container_name: aido-backend
    environment:
      - DATABASE_URL=postgresql://aido:aido@postgres:5432/aido_lab
      - REDIS_URL=redis://redis:6379/0
    env_file:
      - ./backend/.env
    volumes:
      - ./backend:/app
      - workspaces:/app/workspaces
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - aido-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    image: aido-frontend:latest
    container_name: aido-frontend
    environment:
      NEXT_PUBLIC_API_URL: "http://localhost:8000"
      NEXT_PUBLIC_WS_URL: "ws://localhost:8000"
      DOCKER_ENV: "true"
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - aido-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  workspaces:

networks:
  aido-network:
    driver: bridge
